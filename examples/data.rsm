/* This demonstrates use of global data which the assembler places in the data section
   of the ROM, which acts as a template at runtime: the data's initial values are copied
   into an execution instance's memory by the virtual machine when loading a ROM.
   A data's address can be referenced by using its name as an instruction argument. */

data small  i8  = 123
data large  i64 = 0xdeadfacebeef
data large2 i64 // zero initialized

fun main(i32) {
  // load some of the data values from memory into registers
  R0 = 0 // base of data in memory is always at address 0x0
  R1 = load R0 large
  R2 = load1u R0 small
  R3 = load4s R0 medium
  // store value in R1 to global (data memory) @large2
  store R1 R0 large2
  R4 = load R0 large2 // load back into a register so we can inspect it
  ret
}

// definition order doesn't matter
data medium i32 = -123456

