/*
This demonstrates use of global data which the assembler places in the data
section of the ROM, which acts as a template at runtime: the data's
initial values are copied into an execution instance's memory by the
virtual machine when loading a ROM. A data's address can be referenced by
using its name as an instruction argument.
*/
data small  i8  = 123
data large  i64 = 0xdeadfacebeef
data large2 i64 // zero initialized

fun main(i32) {
  SP = sub SP 8 // allocate 8 bytes on stack
  // load some of the data values from memory into registers
  R1 = load SP large
  R2 = load1u SP small
  R3 = load4s SP medium
  // store value in R1 to global (data memory) @large2
  store R1 SP large2
  R4 = load SP large2 // load back into a register so we can inspect it
  SP = add SP 8       // free stack memory
}

// definition order doesn't matter
data medium i32 = -123456
